import numpy as np

import cupy as cp

import time

# define grid size

N = 100

def f(i, j):

     """
     Count the elements in the right side vector
     """

     x = i / N

     y = j / N

     return np. sin(np. pi * x) * np. sin(np. pi * y)


# Define the number of iterations

iter_num = 1000

# Define the initial value of the velocity field

u = cp.zeros((N*N))

# define coefficient matrix

A = cp.zeros((N*N, N*N))

# define the right vector

F = cp.zeros((N*N))

# Initialize coefficient matrix and right end vector

for i in range(N):

     for j in range(N):

         idx = i * N + j

         if i == 0 or i == N-1 or j == 0 or j == N-1:

             A[idx, idx] = 1

             F[idx] = 0
         else:
             A[idx, idx] = -4
             A[idx, idx-1] = 1
             A[idx, idx+1] = 1
             A[idx, idx-N] = 1
             A[idx, idx+N] = 1
             F[idx] = f(i, j) # Calculate the right end vector

# iterative solution
start_time = time.time() # record program start time
for k in range(iter_num):
     for i in range(1, N-1):
         for j in range(1, N-1):
             idx = i * N + j
             u[idx] = 0.25 * (u[idx-1] + u[idx+1] + u[idx-N] + u[idx+N] - F[idx]) # calculate velocity field
end_time = time.time() # record the end time of the program

# Compute the full error
err = cp.linalg.norm(cp.dot(A, u) - F)

# output result
print("Error: ", err)

print("Time: ", end_time - start_time, "s")
